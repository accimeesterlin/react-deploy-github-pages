{"version":3,"sources":["SharedSnackbar.jsx","SharedSnackbarProvider.jsx","ButtonA.jsx","ButtonB.jsx","App.js","serviceWorker.js","index.js"],"names":["SharedSnackbar","react_default","a","createElement","SharedSnackbarConsumer","_ref","snackbarIsOpen","message","closeSnackbar","core_index_es","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","key","color","onClick","index_es","SharedSnackContext","React","createContext","isOpen","SharedSnackbarProvider","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","openSnackbar","setState","closeSnackBar","inherits","createClass","value","children","props","Provider","src_SharedSnackbar","Component","Consumer","ButtonA","variant","ButtonB","Header","Footer","Project","App","console","log","SharedSnackbarProvider_SharedSnackbarProvider","src_ButtonA","src_ButtonB","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","basename","process","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8ad4e5b.chunk.js","sourcesContent":["import React from 'react';\nimport { Close } from '@material-ui/icons';\nimport { IconButton, Snackbar } from '@material-ui/core';\nimport { SharedSnackbarConsumer } from './SharedSnackbarProvider';\n\nconst SharedSnackbar = () => <SharedSnackbarConsumer>\n\n    {({ snackbarIsOpen, message, closeSnackbar }) => (\n        <Snackbar\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left'\n            }}\n            open={snackbarIsOpen}\n            autoHideDuration={6000}\n            onClose={closeSnackbar}\n            message={message}\n            action={[\n                <IconButton key='close' color='inherit' onClick={closeSnackbar}>\n                    <Close />\n                </IconButton>\n            ]}\n        />\n    )}\n</SharedSnackbarConsumer>;\n\n// Inside the Consumer has to be a function\n\n\n\nexport default SharedSnackbar;","import React from 'react';\nimport SharedSnackbar from './SharedSnackbar';\n\nconst SharedSnackContext = React.createContext({\n  isOpen: false,\n  message: ''\n}); // Context\n\n\nexport class SharedSnackbarProvider extends React.Component {\n\n  state = {\n    isOpen: false,\n    message: ''\n  };\n\n  openSnackbar = message => {\n    this.setState({\n      message,\n      isOpen: true\n    });\n  };\n\n  closeSnackBar = () => {\n    this.setState({\n      message: '',\n      isOpen: false\n    });\n  };\n\n\n  render() {\n    const {children} = this.props;\n\n    // JSX\n    return (\n      <div>\n        <h2>Hello World</h2>\n\n        <SharedSnackContext.Provider\n          value={{\n            openSnackbar: this.openSnackbar,\n            closeSnackbar: this.closeSnackBar,\n            snackbarIsOpen: this.state.isOpen,\n            message: this.state.message\n          }}\n        >\n\n          <SharedSnackbar />\n          {children}\n        </SharedSnackContext.Provider>\n      </div>\n    );\n  }\n}\n\n\nexport const SharedSnackbarConsumer = SharedSnackContext.Consumer;","import React from 'react';\nimport { Button } from '@material-ui/core';\n\n\nimport { SharedSnackbarConsumer } from './SharedSnackbarProvider';\n\nconst ButtonA = () => <SharedSnackbarConsumer>\n\n    {(value) => (\n\n        <Button\n            variant='contained'\n            color='primary'\n            onClick={() => value.openSnackbar('You clicked Button A')}\n        >\n            Button A\n        </Button>\n    )}\n</SharedSnackbarConsumer>\n\n\nexport default ButtonA;","import React from 'react';\nimport { Button } from '@material-ui/core';\n\n\nimport { SharedSnackbarConsumer } from './SharedSnackbarProvider';\n\nconst ButtonB = () => <SharedSnackbarConsumer>\n\n    {(value) => (\n\n        <Button\n            variant='contained'\n            color='primary'\n            onClick={() => value.openSnackbar('You clicked Button B')}\n        >\n            Button B Test\n        </Button>\n    )}\n</SharedSnackbarConsumer>\n\n\nexport default ButtonB;","import React from 'react';\nimport { SharedSnackbarProvider } from './SharedSnackbarProvider';\nimport { Route } from 'react-router-dom';\nimport ButtonA from './ButtonA';\nimport ButtonB from './ButtonB';\n\nconst Header = () => (\n  <div>\n    <h2>Header Component</h2>\n  </div>\n);\n\n\nconst Footer = () => (\n  <div>\n    <h2>Footer Component</h2>\n  </div>\n);\n\n\nconst Project = () => (\n  <div>\n    <h2>Project Component</h2>\n  </div>\n);\n\nexport default class App extends React.Component {\n\n\n  render() {\n\n    console.log('This: ', this);\n\n    // JSX\n    return (\n      <div>\n        <h2>Hello World</h2>\n\n        <SharedSnackbarProvider>\n\n          <ButtonA />\n          <ButtonB />\n          \n\n        </SharedSnackbarProvider>\n\n        <Route path = '/' component = {Header}/>\n        <Route path = '/footer' component = {Footer}/>\n        <Route path = '/project' component = {Project}/>\n      </div>\n    );\n  }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}